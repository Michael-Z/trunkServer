#ifndef _SUM_RANDOM_NUMBER_
#define _SUM_RANDOM_NUMBER_

#define PRN_GROUP 10
#define PRN_SIZE  100

const int PRN[PRN_GROUP][PRN_SIZE] =
{
	{ 50, 83, 89, 39, 24, 6, 29, 0, 11, 45, 68, 97, 81, 21, 30, 47, 3, 42, 77, 98, 67, 64, 93, 25, 82, 76, 1, 99, 65, 87, 57, 85, 4, 43, 26, 18, 90, 58, 88, 79, 56, 38, 78, 51, 41, 54, 84, 96, 52, 32, 44, 8, 91, 20, 36, 17, 53, 95, 73, 62, 33, 40, 7, 37, 60, 70, 48, 46, 80, 49, 55, 15, 71, 59, 27, 61, 86, 5, 35, 31, 34, 94, 12, 92, 16, 66, 74, 69, 23, 22, 72, 10, 13, 19, 63, 9, 2, 28, 75, 14 },
	{ 66, 33, 36, 12, 30, 59, 53, 1, 43, 0, 2, 13, 40, 79, 39, 94, 77, 73, 35, 68, 50, 90, 17, 62, 63, 99, 81, 32, 55, 84, 69, 92, 34, 85, 71, 61, 38, 64, 72, 41, 93, 31, 24, 19, 58, 37, 26, 14, 75, 16, 45, 7, 95, 52, 21, 98, 46, 86, 10, 49, 5, 8, 29, 23, 47, 9, 28, 25, 96, 89, 54, 51, 56, 15, 42, 4, 80, 48, 82, 22, 27, 67, 97, 78, 83, 65, 74, 76, 3, 20, 88, 70, 57, 60, 18, 44, 91, 87, 6, 11 },
	{ 44, 73, 12, 80, 79, 47, 27, 9, 49, 41, 66, 88, 82, 62, 96, 16, 63, 36, 1, 35, 78, 0, 81, 72, 59, 95, 74, 19, 21, 64, 18, 14, 97, 38, 45, 2, 30, 76, 94, 10, 83, 51, 87, 50, 65, 85, 11, 53, 26, 31, 99, 98, 6, 40, 52, 37, 68, 28, 60, 48, 25, 86, 69, 75, 15, 70, 56, 93, 34, 39, 55, 3, 32, 91, 20, 8, 61, 13, 71, 90, 22, 57, 89, 54, 17, 33, 84, 24, 23, 42, 58, 29, 43, 4, 67, 5, 92, 7, 77, 46 },
	{ 61, 81, 13, 99, 29, 41, 17, 87, 62, 21, 71, 0, 93, 78, 64, 68, 86, 94, 32, 73, 9, 11, 72, 98, 8, 79, 51, 33, 46, 49, 38, 90, 31, 96, 91, 44, 66, 56, 58, 7, 55, 20, 83, 75, 4, 84, 25, 3, 52, 95, 15, 24, 74, 42, 76, 18, 60, 34, 97, 16, 14, 2, 77, 43, 45, 57, 28, 40, 1, 92, 88, 53, 70, 82, 47, 26, 37, 12, 6, 10, 5, 63, 39, 30, 27, 69, 35, 50, 85, 19, 59, 22, 80, 23, 36, 89, 67, 48, 65, 54 },
	{ 1, 93, 41, 71, 2, 63, 73, 87, 98, 59, 75, 88, 34, 43, 86, 25, 66, 90, 31, 7, 29, 61, 32, 82, 26, 11, 54, 99, 20, 40, 22, 47, 17, 10, 76, 3, 51, 91, 58, 50, 14, 19, 38, 95, 62, 53, 27, 68, 74, 80, 18, 65, 23, 9, 46, 24, 13, 49, 83, 56, 12, 94, 45, 8, 78, 48, 79, 16, 6, 89, 15, 72, 21, 92, 30, 84, 36, 33, 69, 77, 39, 42, 28, 35, 52, 5, 4, 96, 44, 57, 85, 97, 55, 70, 60, 67, 81, 0, 64, 37 },
	{ 9, 34, 51, 36, 14, 26, 95, 90, 23, 57, 20, 18, 85, 71, 10, 91, 0, 67, 98, 24, 42, 27, 58, 2, 72, 64, 35, 61, 78, 83, 68, 82, 5, 43, 4, 59, 84, 52, 6, 53, 89, 99, 19, 8, 32, 41, 88, 65, 17, 7, 40, 55, 44, 56, 81, 31, 92, 80, 16, 74, 69, 30, 96, 49, 77, 50, 73, 11, 97, 15, 38, 86, 48, 3, 70, 87, 12, 54, 33, 13, 39, 47, 37, 46, 62, 22, 21, 76, 45, 93, 75, 28, 1, 94, 29, 79, 25, 63, 66, 60 },
	{ 39, 8, 69, 11, 77, 87, 97, 23, 9, 58, 56, 15, 85, 20, 32, 84, 14, 2, 70, 26, 17, 31, 76, 52, 53, 41, 48, 64, 90, 81, 57, 82, 40, 3, 78, 95, 30, 45, 73, 55, 80, 59, 62, 92, 34, 88, 0, 72, 18, 79, 74, 16, 4, 43, 93, 89, 98, 35, 67, 38, 33, 60, 5, 47, 68, 71, 13, 27, 36, 37, 99, 7, 29, 65, 86, 50, 10, 54, 6, 61, 42, 25, 22, 19, 66, 63, 12, 75, 96, 94, 44, 49, 21, 46, 1, 91, 83, 24, 51, 28 },
	{ 96, 79, 36, 80, 13, 58, 22, 57, 14, 78, 34, 99, 77, 47, 82, 5, 65, 75, 97, 66, 28, 25, 83, 1, 50, 88, 10, 91, 42, 0, 19, 67, 3, 52, 44, 89, 18, 26, 8, 35, 76, 16, 90, 15, 46, 29, 48, 94, 55, 9, 12, 74, 92, 33, 39, 95, 41, 27, 59, 64, 4, 40, 60, 51, 49, 69, 70, 63, 73, 38, 6, 21, 87, 53, 17, 24, 85, 84, 11, 93, 43, 61, 20, 32, 37, 7, 98, 81, 30, 23, 71, 68, 56, 62, 2, 86, 31, 45, 72, 54 },
	{ 90, 99, 7, 25, 91, 27, 64, 74, 78, 81, 87, 35, 76, 84, 36, 41, 77, 98, 73, 40, 24, 19, 69, 93, 58, 88, 31, 97, 45, 46, 54, 52, 33, 70, 61, 32, 37, 23, 28, 96, 1, 72, 12, 22, 50, 51, 82, 44, 86, 21, 59, 16, 85, 38, 18, 39, 20, 67, 13, 10, 55, 92, 30, 5, 47, 15, 57, 68, 14, 26, 75, 9, 60, 63, 4, 79, 89, 66, 0, 53, 95, 43, 80, 17, 94, 56, 49, 42, 65, 48, 34, 71, 62, 8, 29, 3, 6, 2, 11, 83 },
	{ 49, 2, 36, 69, 31, 99, 87, 73, 45, 23, 46, 67, 57, 9, 5, 75, 79, 83, 56, 61, 22, 92, 0, 60, 80, 15, 84, 28, 53, 38, 41, 40, 11, 20, 82, 78, 34, 35, 32, 43, 86, 39, 90, 97, 13, 62, 88, 10, 3, 55, 81, 30, 50, 58, 52, 44, 19, 59, 64, 26, 16, 1, 76, 89, 4, 25, 24, 7, 54, 33, 72, 95, 94, 70, 51, 96, 37, 18, 63, 85, 65, 21, 27, 47, 48, 71, 68, 42, 66, 14, 8, 98, 6, 91, 93, 17, 77, 12, 74, 29 },
};

enum RandomNumberType
{
	RNT_TRUE,		//真随机数
	RNT_PSEUDO,		//伪随机数
};

class CRandomNumber
{
public:
	CRandomNumber();

	int getMode(){ return m_nType; }
	void setMode(int type){ m_nType = type; }

	int getIndex(){ return m_nIndex; }
	void setIndex(int index){ m_nIndex = index; }

	int getGroup(){ return m_nGroup; }
	void setGroup(int group){ m_nGroup = group; }

	int random();
	int random(int min, int max);
	float randomF();
	float randomF(int min, int max);

private:
	int m_nType;
	int m_nIndex;
	int m_nGroup;
};

#endif 
